<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.example</groupId>
	<artifactId>encrypted-file-explorer</artifactId>
	<version>1.0.0</version>
	<name>Encrypted File Explorer</name>
	<description>Java Swing 桌面工具：文件夹复制/加解密/查看（支持缩略图与WEBP）</description>
	<properties>
		<maven.compiler.source>11</maven.compiler.source>
		<maven.compiler.target>11</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>
	<dependencies>
		<!-- TwelveMonkeys: 扩展 ImageIO，支持 WEBP 等格式 -->
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-webp</artifactId>
			<version>3.10.1</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-jpeg</artifactId>
			<version>3.10.1</version>
		</dependency>
		<dependency>
			<groupId>com.twelvemonkeys.imageio</groupId>
			<artifactId>imageio-pnm</artifactId>
			<version>3.10.1</version>
		</dependency>
		<!-- SLF4J: API + Simple 实现（运行时） -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>2.0.13</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
			<version>2.0.13</version>
			<scope>runtime</scope>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.11.0</version>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.3.0</version>
				<configuration>
					<archive>
						<manifest>
							<mainClass>com.example.encryptedexplorer.Main</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>3.5.0</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<shadedArtifactAttached>true</shadedArtifactAttached>
							<shadedClassifierName>all</shadedClassifierName>
							<createDependencyReducedPom>true</createDependencyReducedPom>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>com.example.encryptedexplorer.Main</mainClass>
								</transformer>
								<!-- 合并 SPI，确保 ImageIO 插件可用 -->
								<transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- 0) 构建前清理已存在的 jre 目录，避免 jlink 因输出目录已存在而失败 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<id>cleanup-jre-dir</id>
						<phase>prepare-package</phase>
						<goals><goal>run</goal></goals>
						<configuration>
							<target>
								<delete dir="${project.build.directory}/app/jre" quiet="true" failonerror="false"/>
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- 1) 使用 jlink 命令生成精简 JRE（无需模块化项目） -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>3.5.0</version>
				<executions>
					<execution>
						<id>run-jlink</id>
						<phase>prepare-package</phase>
						<goals><goal>exec</goal></goals>
						<configuration>
							<executable>${java.home}/bin/jlink</executable>
							<arguments>
								<argument>--add-modules</argument>
								<argument>java.base,java.desktop,java.logging,java.datatransfer,java.prefs,java.xml</argument>
								<argument>--strip-debug</argument>
								<argument>--no-header-files</argument>
								<argument>--no-man-pages</argument>
								<argument>--compress=2</argument>
								<argument>--output</argument>
								<argument>${project.build.directory}/app/jre</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- 2) 复制 fat jar 到 app -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.3.1</version>
				<executions>
					<execution>
						<id>copy-fat-jar</id>
						<phase>package</phase>
						<goals><goal>copy-resources</goal></goals>
						<configuration>
							<outputDirectory>${project.build.directory}/app</outputDirectory>
							<resources>
								<resource>
									<directory>${project.build.directory}</directory>
									<includes>
										<include>${project.artifactId}-${project.version}-all.jar</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- 3) 生成使用内置 jre 的 EXE -->
			<plugin>
				<groupId>com.akathist.maven.plugins.launch4j</groupId>
				<artifactId>launch4j-maven-plugin</artifactId>
				<version>2.5.0</version>
				<executions>
					<execution>
						<id>wrap-exe</id>
						<phase>package</phase>
						<goals>
							<goal>launch4j</goal>
						</goals>
						<configuration>
							<outfile>${project.build.directory}/app/encrypted-file-explorer.exe</outfile>
							<jar>${project.build.directory}/app/${project.artifactId}-${project.version}-all.jar</jar>
							<headerType>gui</headerType>
							<chdir>.</chdir>
							<classPath>
								<mainClass>com.example.encryptedexplorer.Main</mainClass>
							</classPath>
							<jre>
								<path>jre</path>
								<minVersion>11</minVersion>
							</jre>
							<errTitle>Encrypted File Explorer</errTitle>
							<priority>normal</priority>
							<stayAlive>false</stayAlive>
							<messages>
								<startupErr>启动失败。</startupErr>
							</messages>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>installer</id>
			<build>
				<plugins>
					<!-- Use local jpackage (JDK 14+) to produce single-file installer -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>3.5.0</version>
						<executions>
							<execution>
								<id>make-installer-exe</id>
								<phase>verify</phase>
								<goals><goal>exec</goal></goals>
								<configuration>
									<executable>${java.home}/bin/jpackage</executable>
									<arguments>
										<argument>--type</argument>
										<argument>exe</argument>
										<argument>--name</argument>
										<argument>Encrypted File Explorer</argument>
										<argument>--app-version</argument>
										<argument>${project.version}</argument>
										<argument>--input</argument>
										<argument>${project.build.directory}/app</argument>
										<argument>--main-jar</argument>
										<argument>${project.artifactId}-${project.version}-all.jar</argument>
										<argument>--main-class</argument>
										<argument>com.example.encryptedexplorer.Main</argument>
										<argument>--runtime-image</argument>
										<argument>${project.build.directory}/app/jre</argument>
										<argument>--dest</argument>
										<argument>${project.build.directory}/installer</argument>
										<argument>--win-menu</argument>
										<argument>--win-shortcut</argument>
										<argument>--win-dir-chooser</argument>
										<argument>--win-per-user-install</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project> 